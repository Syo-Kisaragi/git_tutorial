[git config --global]
使用中のPCにある全てのGitプロジェクトに設定を適用

◆エイリアス
ex) git config --global alias.ct commit




[git add]
変更をステージに追加する
ステージ：任意のファイルをステージに追加するための機能

git add <ファイル名>
git add <ディレクトリ名>
git add . // 全てステージに追加



[git commit]
コミット：変更を記録する
記録内容：変更、新規作成、削除、複数ファイルの変更、作成、削除

git commit
git commit -m "<メッセージ>"
git commit -v



[git log] 
コミットされたファイルの状態を確認

git log --oneline: 変更情報を一行ずつで表示
git log -n <num>: 新しくコミットしたファイルから<num>番目までのファイルを表示
git log -p <file-name>: <file-name>の詳しい変更情報を表示。<file-name>の指定がなければ、全ファイルの情報を表示。 


[git diff]
ローカルファイルとステージング領域のファイルとの差分を表示

git diff HEAD: ステージング領域と最新コミットファイルとの差分を表示
git diff --staged // ステージング領域とリポジトリとの差分を表示
git diff --staged // ステージング領域とリポジトリとの差分を表示



[git remote add origin <URL>]
remote add: リモートリポジトリを追加
origin: リモートリポジトリURLのエイリアス
<URL>: https://github.com/ユーザ名/リポジトリ名


[git push]
ローカルリポジトリの内容をリモートリポジトリへ送信

git push origin master: masterブランチへ送る
git push origin feature: featureブランチへ送る
git push -u origin master: originのmasuterブランチへ送る際は、次回以降git pushでOK


[git rm]
コミットしたファイルをGitの管理から削除する

git rm <ファイル名>
git rm -r <ディレクトリ名>
git rm --cached [file-name]: Gitの管理から外したいけど、ファイルは削除したくない（後にファイルは.gitignoreに追記しておく）



[git clone <リポジトリ名>]
Gitリポジトリのコピーを作成する


[git mv <旧ファイル> <新ファイル>]
ファイルの移動を記録する

以下のコマンドと同じ
mv <旧ファイル> <新ファイル>
git rm <旧ファイル>
git add <新ファイル>



[git checkout]
ファイルへの変更を取り消す

git checkout -- <ファイル名>
git checkout -- <ディレクトリ名>

# 全変更を取り消す
git checkout -- .



[git reset]
ステージした変更を取り消す

git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>

# 全変更を取り消す
git reset HEAD .


[git commit --amend]
直前のコミットをやり直す
※リモートリポジトリにPushしたコミットはやり直したらダメ



[git remote]
リモートを表示する

git remote -v # 対応するURLを表示
git remote show <リモート名>
ex) git remote show origin => リモートの詳細表示

git remote rename <旧リモート名> <新リモート名> => リモート名を変更
git remote rm <リモート名> => リモートを削除

[git fetch]
リモートから情報を取得する

git fetch <リモート名>
git fetch origin


[git merge]

git merge # fetchで取り込んだ情報をワークツリーに反映する



[git pull]
リモートから情報を取得してマージする

git pull <リモート名> <ブランチ名>
git pull origin master

※プルの注意点
git pull origin hoge → masterブランチにhogeブランチがマージされる



# 上記コマンドは省略可能
git pull

# これは下記コマンドと同じこと
git fetch origin master
git merge origin/master


[管理しないファイルをGitの管理から外す]
.gitignoreファイルに指定する
・パスワードなどの機密情報
・WindowsやMacなどで自動生成されたファイルやキャッシュなど、チーム開発で必要のないファイル

◆書き方
# #から始まる行はコメント

# 指定したファイルを除外
index.html

# ルートディレクトリを指定
/root.html

#　ディレクトリ以下を除外
dir/

# /以外の文字列にマッチ「*」
/*/*.css


[ブランチ]
分岐して開発していくためのもの
コミットを指したポインタ


git branch # ブランチの一覧を表示する
git branch -a # 全てのブランチの一覧を表示
git branch <ブランチ名> => ブランチを作成するだけで、切り替えまでは行わない
HEAD:自分が作業しているブランチを指し示したポインタ




-ブランチの切り替え
git checkout <既存ブランチ名>
git checkout -b <新ブランチ名> => ブランチを新規作成して切り替える


-ブランチ名を変更
git branch -m <ブランチ名> => 自分が作業しているブランチの名前を変更

-ブランチを削除
git branch -d <ブランチ名> => masterにマージされていない変更が残っている場合は削除しない
git branch -D <ブランチ名> => 強制的に削除する

-リモートブランチ
リモートのブランチの状態へのポインタ
<リモート>/<ブランチ名>で参照できる

[マージ]
他の人の変更内容を取り込む

git merge <ブランチ名>
git merge <リモート名/ブランチ名>

Fast Forward:早送りになるマージ => ブランチが枝分かれしてなかった時はブランチのポインタを前に進めるだけ
Auto Merge:基本的なマージ => 枝分かれして開発していた場合、マージコミットという新しいコミットを作る(親コミットファイルが２つある)


[コンフリクト]
同じファイルの同じ行に対して異なる編集を行なった時

-解決方法
1. ファイルの内容を書き換える
2. 「<<」「==」「>>」の記述を削除する

-コンフリクト関連の事故が起きにくい運用ルール
1. 複数人で同じファイルを変更しない
2. pullやmergeをする前に変更ちゅうの状態をなくしておく（commitやstashをしておく）
3. pullするときは、pullするブランチに移動してpullする
4. コンフリクトしても慌てない
