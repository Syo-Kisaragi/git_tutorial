[git config --global]
使用中のPCにある全てのGitプロジェクトに設定を適用

◆エイリアス
ex) git config --global alias.ct commit




[git add]
変更をステージに追加する
ステージ：任意のファイルをステージに追加するための機能

git add <ファイル名>
git add <ディレクトリ名>
git add . // 全てステージに追加



[git commit]
コミット：変更を記録する
記録内容：変更、新規作成、削除、複数ファイルの変更、作成、削除

git commit
git commit -m "<メッセージ>"
git commit -v



[git log] 
コミットされたファイルの状態を確認

git log --oneline: 変更情報を一行ずつで表示
git log -n <num>: 新しくコミットしたファイルから<num>番目までのファイルを表示
git log -p <file-name>: <file-name>の詳しい変更情報を表示。<file-name>の指定がなければ、全ファイルの情報を表示。 


[git diff]
ローカルファイルとステージング領域のファイルとの差分を表示

git diff HEAD: ステージング領域と最新コミットファイルとの差分を表示
git diff --staged // ステージング領域とリポジトリとの差分を表示
git diff --staged // ステージング領域とリポジトリとの差分を表示



[git remote add origin <URL>]
remote add: リモートリポジトリを追加
origin: リモートリポジトリURLのエイリアス
<URL>: https://github.com/ユーザ名/リポジトリ名


[git push]
ローカルリポジトリの内容をリモートリポジトリへ送信

git push origin master: masterブランチへ送る
git push origin feature: featureブランチへ送る
git push -u origin master: originのmasuterブランチへ送る際は、次回以降git pushでOK


[git rm]
コミットしたファイルをGitの管理から削除する

git rm <ファイル名>
git rm -r <ディレクトリ名>
git rm --cached [file-name]: Gitの管理から外したいけど、ファイルは削除したくない（後にファイルは.gitignoreに追記しておく）



[git clone <リポジトリ名>]
Gitリポジトリのコピーを作成する


[git mv <旧ファイル> <新ファイル>]
ファイルの移動を記録する

以下のコマンドと同じ
mv <旧ファイル> <新ファイル>
git rm <旧ファイル>
git add <新ファイル>



[git checkout]
ファイルへの変更を取り消す

git checkout -- <ファイル名>
git checkout -- <ディレクトリ名>

# 全変更を取り消す
git checkout -- .



[git reset]
ステージした変更を取り消す

git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>

# 全変更を取り消す
git reset HEAD .


[git commit --amend]
直前のコミットをやり直す
※リモートリポジトリにPushしたコミットはやり直したらダメ



[git remote]
リモートを表示する

git remote -v # 対応するURLを表示

[管理しないファイルをGitの管理から外す]
.gitignoreファイルに指定する
・パスワードなどの機密情報
・WindowsやMacなどで自動生成されたファイルやキャッシュなど、チーム開発で必要のないファイル

◆書き方
# #から始まる行はコメント

# 指定したファイルを除外
index.html

# ルートディレクトリを指定
/root.html

#　ディレクトリ以下を除外
dir/

# /以外の文字列にマッチ「*」
/*/*.css
